`ifndef DEFINE_STATE

// for top state - we have more states than needed
typedef enum logic [1:0] {
    S_IDLE,
    S_UART_RX,
    S_MILESTONE_1,
	 S_MILESTONE_2
} top_state_type;

typedef enum logic [1:0] {
    S_RXC_IDLE,
    S_RXC_SYNC,
    S_RXC_ASSEMBLE_DATA,
    S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
    S_US_IDLE,
    S_US_STRIP_FILE_HEADER_1,
    S_US_STRIP_FILE_HEADER_2,
    S_US_START_FIRST_BYTE_RECEIVE,
    S_US_WRITE_FIRST_BYTE,
    S_US_START_SECOND_BYTE_RECEIVE,
    S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
    S_VS_WAIT_NEW_PIXEL_ROW,
    S_VS_NEW_PIXEL_ROW_DELAY_1,
    S_VS_NEW_PIXEL_ROW_DELAY_2,
    S_VS_NEW_PIXEL_ROW_DELAY_3,
    S_VS_NEW_PIXEL_ROW_DELAY_4,
    S_VS_NEW_PIXEL_ROW_DELAY_5,
    S_VS_FETCH_PIXEL_DATA_0,
    S_VS_FETCH_PIXEL_DATA_1,
    S_VS_FETCH_PIXEL_DATA_2,
    S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

parameter 
   VIEW_AREA_LEFT = 160,
   VIEW_AREA_RIGHT = 480,
   VIEW_AREA_TOP = 120,
   VIEW_AREA_BOTTOM = 360;



`define DEFINE_STATE 1

typedef enum logic [4:0] {
    S_MS1_IDLE,
    S_MS1_LEAD_IN_0,
    S_MS1_LEAD_IN_1,
    S_MS1_LEAD_IN_2,
    S_MS1_LEAD_IN_3,
    S_MS1_LEAD_IN_4,
    S_MS1_LEAD_IN_5,
    S_MS1_LEAD_IN_6,
    S_MS1_LEAD_IN_7,

    S_MS1_COMMON_CASE_0,
    S_MS1_COMMON_CASE_1,
    S_MS1_COMMON_CASE_2,
    S_MS1_COMMON_CASE_3,
    S_MS1_COMMON_CASE_4,
    S_MS1_COMMON_CASE_5,
    S_MS1_COMMON_CASE_6,
    S_MS1_COMMON_CASE_7,
    S_MS1_COMMON_CASE_8,
    S_MS1_COMMON_CASE_9,
    S_MS1_COMMON_CASE_10,
    S_MS1_COMMON_CASE_11,
    S_MS1_COMMON_CASE_12,
    S_MS1_COMMON_CASE_13,

    S_MS1_LEAD_OUT_0,
    S_MS1_LEAD_OUT_1,
    S_MS1_LEAD_OUT_2,
    S_MS1_LEAD_OUT_3,
    S_MS1_LEAD_OUT_4,
    S_MS1_LEAD_OUT_5,
    S_MS1_LEAD_OUT_6,
    S_MS1_LEAD_OUT_7
} MS1_state_type;

typedef enum logic [4:0] {
   S_MS2_IDLE,
	S_MS2_FSP_LEAD_IN_0,
	S_MS2_FSP_LEAD_IN_1,
	S_MS2_FSP_LEAD_IN_2,
	S_MS2_FSP_LEAD_IN_3,
	S_MS2_FSP_COMMON_CASE,
	S_MS2_FSP_COMMON_CASE_1,
	S_MS2_FSP_LEAD_OUT_0,
	S_MS2_FSP_LEAD_OUT_1,
	S_MS2_FSP_LEAD_OUT_2,
	S_MS2_FSP_LEAD_OUT_3,
	S_MS2_COMPUTE_T,
	S_MS2_FSP_LEAD_IN_4,
	S_MS2_FSP_LEAD_IN_5,
	S_MS2_FSP_LEAD_IN_6,
	S_MS2_COMPUTE_T_LI_0,
	S_MS2_COMPUTE_T_LI_1,
	S_MS2_COMPUTE_T0,
	S_MS2_COMPUTE_T1,
	S_MS2_COMPUTE_T2,
	S_MS2_COMPUTE_T3,
	S_MS2_COMPUTE_S_LI0,
	S_MS2_COMPUTE_S_LI1,
	S_MS2_COMPUTE_S0,
	S_MS2_COMPUTE_S1,
	S_MS2_COMPUTE_S2,
	S_MS2_COMPUTE_S3,
	S_MS2_COMPUTE_S4,
	S_MS2_COMPUTE_S5
	
} MS2_state_type;

`endif

